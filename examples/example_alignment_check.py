"""
examples/example_alignment_check.py - Alignment Verification Example

Demonstrates how to use the visualization module to verify SAR-optical alignment
in generated tiles.

Usage:
    python examples/example_alignment_check.py

Requirements:
    - matplotlib
    - scipy
    - numpy
    - Tiles generated by scripts/build_tiles.py

Author: Axion-Sat Project
"""

import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from axs_lib.viz import show_alignment, show_tile_overview, check_alignment_quality


def demo_alignment_check():
    """
    Demonstrate alignment visualization with example tile.
    
    This example shows how to:
    1. Check if tiles exist
    2. Visualize SAR-optical alignment
    3. Compute alignment quality metrics
    4. Adjust visualization parameters
    """
    
    print("=" * 79)
    print("ALIGNMENT VERIFICATION DEMO")
    print("=" * 79)
    print()
    
    # Look for example tiles
    tile_dirs = [
        Path("data/tiles"),
        Path("output/demo_tiles"),
    ]
    
    tile_path = None
    for tile_dir in tile_dirs:
        if tile_dir.exists():
            tiles = list(tile_dir.glob("**/*.npz"))
            if tiles:
                tile_path = tiles[0]
                break
    
    if tile_path is None:
        print("⚠ No tiles found!")
        print()
        print("To generate example tiles, run:")
        print("  python scripts/build_tiles.py \\")
        print("      --bbox 36.75 -1.35 36.85 -1.25 \\")
        print("      --date 2024-01-15 \\")
        print("      --tile-size 256")
        print()
        return
    
    print(f"Found tile: {tile_path}")
    print()
    
    # Example 1: Basic alignment check
    print("=" * 79)
    print("EXAMPLE 1: Basic Alignment Check")
    print("=" * 79)
    print()
    
    try:
        show_alignment(
            tile_path,
            show_plot=False,  # Don't show interactively in example
            save_path="output/alignment_check_basic.png"
        )
        print("✓ Basic alignment check saved to output/alignment_check_basic.png")
    except Exception as e:
        print(f"✗ Error: {e}")
    
    print()
    
    # Example 2: Adjusted edge detection
    print("=" * 79)
    print("EXAMPLE 2: Fine-tuned Edge Detection")
    print("=" * 79)
    print()
    
    try:
        # More selective edge detection
        show_alignment(
            tile_path,
            edge_threshold=0.15,  # Higher threshold = fewer edges
            edge_color='red',
            show_plot=False,
            save_path="output/alignment_check_selective.png"
        )
        print("✓ Selective edges saved to output/alignment_check_selective.png")
    except Exception as e:
        print(f"✗ Error: {e}")
    
    print()
    
    # Example 3: Quantitative metrics
    print("=" * 79)
    print("EXAMPLE 3: Alignment Quality Metrics")
    print("=" * 79)
    print()
    
    try:
        metrics = check_alignment_quality(
            tile_path,
            sar_band='s1_vv',
            edge_threshold=0.12
        )
        
        print("Alignment metrics:")
        print(f"  Edge pixels: {metrics['edge_count']:,}")
        print(f"  Edge coverage: {metrics['edge_percent']:.2f}%")
        print(f"  SAR valid data: {metrics['sar_valid_percent']:.1f}%")
        
        for key in ['s2_b4_valid_percent', 's2_b3_valid_percent', 's2_b2_valid_percent']:
            if key in metrics:
                print(f"  {key}: {metrics[key]:.1f}%")
        
        print()
        
        # Quality assessment
        if metrics['edge_percent'] < 1.0:
            print("⚠ WARNING: Very few edges detected")
            print("  → Try lowering edge_threshold (e.g., 0.08)")
        elif metrics['edge_percent'] > 20.0:
            print("⚠ WARNING: Too many edges detected")
            print("  → Try raising edge_threshold (e.g., 0.18)")
        else:
            print("✓ Edge detection in good range")
        
        print()
        
    except Exception as e:
        print(f"✗ Error: {e}")
    
    print()
    
    # Example 4: Tile overview
    print("=" * 79)
    print("EXAMPLE 4: Full Tile Overview")
    print("=" * 79)
    print()
    
    try:
        from axs_lib.viz import show_tile_overview
        
        # This would show all bands
        print("Tile overview can be generated with:")
        print(f"  show_tile_overview('{tile_path}')")
        print()
        print("(Skipping in automated example)")
        
    except Exception as e:
        print(f"✗ Error: {e}")
    
    print()
    
    # Summary
    print("=" * 79)
    print("SUMMARY")
    print("=" * 79)
    print()
    print("Alignment verification helps ensure that:")
    print("  ✓ SAR and optical bands are properly co-registered")
    print("  ✓ Reprojection and resampling worked correctly")
    print("  ✓ Data is suitable for model training")
    print()
    print("Interpretation guide:")
    print("  • SAR edges should align with optical features")
    print("  • Roads, buildings, water edges are good reference points")
    print("  • Offsets indicate misalignment (reprojection issues)")
    print()
    print("Generated outputs:")
    print("  • output/alignment_check_basic.png")
    print("  • output/alignment_check_selective.png")
    print()


if __name__ == "__main__":
    try:
        demo_alignment_check()
    except KeyboardInterrupt:
        print("\nDemo interrupted by user")
    except Exception as e:
        print(f"\nDemo failed: {e}")
        import traceback
        traceback.print_exc()
